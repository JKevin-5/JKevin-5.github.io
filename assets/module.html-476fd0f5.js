import{_ as i,N as o,p as l,q as u,Y as n,t as s,V as a,P as e,a1 as p}from"./framework-e2feaeec.js";const d={},r=n("h1",{id:"module-模块化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#module-模块化","aria-hidden":"true"},"#"),s(" Module 模块化")],-1),k=n("h2",{id:"一、before-模块化",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#一、before-模块化","aria-hidden":"true"},"#"),s(" 一、before 模块化")],-1),m={href:"https://blog.csdn.net/qq_39903567/article/details/115325717",target:"_blank",rel:"noopener noreferrer"},v=p(`<p>在模块化正式出现之前，临时对策是使用全局对象、全局函数、闭包实现伪模块化。</p><div class="custom-container tip"><p class="custom-container-title">TIP</p><p>在ES6出现的class，其实不是一个全新的数据类型，实际上是<code>function</code>或<code>object</code>。</p></div><h3 id="_1-1、全局函数" tabindex="-1"><a class="header-anchor" href="#_1-1、全局函数" aria-hidden="true">#</a> 1.1、全局函数</h3><ol><li>实例：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// fun.js</span>
<span class="token keyword">var</span> <span class="token function-variable function">fun</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;this is fun&quot;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token comment">// 全局使用</span>
<span class="token function">fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>缺点：<br><ul><li>污染全局命名空间，无法明晰的查看模块之间的关系，容易重复混淆。</li></ul></li></ol><h3 id="_1-2、全局对象-namespace模式" tabindex="-1"><a class="header-anchor" href="#_1-2、全局对象-namespace模式" aria-hidden="true">#</a> 1.2、全局对象(namespace模式)</h3><ol><li>实例：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// Object.js</span>
<span class="token keyword">var</span> Object <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token constant">A</span><span class="token operator">:</span><span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span>
    <span class="token function-variable function">B</span><span class="token operator">:</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">// 全局使用</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token constant">A</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token constant">A</span> <span class="token operator">=</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">;</span><span class="token comment">// 可修改</span>
Object<span class="token punctuation">.</span><span class="token constant">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>缺点：<br><ul><li>虽然减少命名空间的冲突，但是仍然无法明晰的查看模块之间的关系，容易重复混淆。</li></ul></li></ol><h3 id="_1-3、iife模式-匿名函数自调用-闭包" tabindex="-1"><a class="header-anchor" href="#_1-3、iife模式-匿名函数自调用-闭包" aria-hidden="true">#</a> 1.3、IIFE模式：匿名函数自调用(闭包)</h3>`,7),h=p(`<ol><li>实例：<div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>myModule<span class="token punctuation">.</span><span class="token function">js</span>
<span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">window</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span> <span class="token comment">// data为内部数据</span>
    <span class="token keyword">function</span> <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">function</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
        <span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    window<span class="token punctuation">.</span>myMoudule <span class="token operator">=</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">myFun1</span><span class="token operator">:</span>fun1
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>window<span class="token punctuation">)</span>
<span class="token comment">// 全局调用</span>
myModule<span class="token punctuation">.</span><span class="token function">myFun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myModule<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 无法读取未暴露内容</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>缺点 <ul><li>需要单独暴露，不够灵活</li><li>外部引入需要自行添加调用</li></ul></li></ol><h2 id="二、-模块化ing" tabindex="-1"><a class="header-anchor" href="#二、-模块化ing" aria-hidden="true">#</a> 二、 模块化ing</h2><ul><li>AMD/CMD</li></ul><h2 id="三、es6模块化" tabindex="-1"><a class="header-anchor" href="#三、es6模块化" aria-hidden="true">#</a> 三、ES6模块化</h2><h2 id="四、commonjs模块化-node环境" tabindex="-1"><a class="header-anchor" href="#四、commonjs模块化-node环境" aria-hidden="true">#</a> 四、CommonJs模块化（node环境）</h2>`,5);function b(f,_){const t=o("RouterLink"),c=o("ExternalLinkIcon");return l(),u("div",null,[r,n("blockquote",null,[n("p",null,[s("本章为"),a(t,{to:"/redBook/Chapter26.html"},{default:e(()=>[s("红宝书 Chapter26")]),_:1}),s(" 结合外部资料整理，主要聚焦在ES6与CommonJS的使用差异上。")])]),k,n("ul",null,[n("li",null,[n("a",m,[s("参考文章"),a(c)])])]),v,n("ul",null,[n("li",null,[a(t,{to:"/redBook/Chapter26.html#_26-2-2-%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4"},{default:e(()=>[s("红宝书 Chapter26 模块定义-参考")]),_:1})]),n("li",null,[a(t,{to:"/redBook/Chapter26.html#_26-2-3-%E6%9A%B4%E9%9C%B2%E5%85%AC%E5%85%B1api"},{default:e(()=>[s("红宝书 Chapter26 暴露公共API-参考")]),_:1})])]),h])}const j=i(d,[["render",b],["__file","module.html.vue"]]);export{j as default};
