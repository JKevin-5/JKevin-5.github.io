import{_ as n,p as s,q as a,a1 as t}from"./framework-e2feaeec.js";const p={},e=t(`<h2 id="_80、组件自定义事件——绑定" tabindex="-1"><a class="header-anchor" href="#_80、组件自定义事件——绑定" aria-hidden="true">#</a> 80、组件自定义事件——绑定</h2><p>组件的事件绑定类似vue实例的自定义事件，父组件定义一个方法，传递给子组件。子组件能够通过该绑定事件传回数据。</p><h3 id="_1-使用-或on的方式-类似使用注解方式" tabindex="-1"><a class="header-anchor" href="#_1-使用-或on的方式-类似使用注解方式" aria-hidden="true">#</a> 1. 使用@或on的方式（类似使用注解方式）</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 通过父组件给子组件传递函数类型的props实现：子给父传递数据 <span class="token operator">--</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>School <span class="token operator">:</span>getSchoolName<span class="token operator">=</span><span class="token string">&quot;getSchoolName&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 通过父组件给子组件绑定一个自定义事件实现：子给父传递数据（第一种写法：使用@或on） <span class="token operator">--</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Student v<span class="token operator">-</span>on<span class="token operator">:</span>atguigu<span class="token operator">=</span><span class="token string">&quot;getStudentName&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  ···
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">getSchoolName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;App收到了学校名：&quot;</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">getStudentName</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span><span class="token operator">...</span>params</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">// a是个数组</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;App收到了学生名：&quot;</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;demo事件被触发了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-使用ref方式-类似使用代码的方式-更灵活" tabindex="-1"><a class="header-anchor" href="#_2-使用ref方式-类似使用代码的方式-更灵活" aria-hidden="true">#</a> 2. 使用ref方式（类似使用代码的方式，更灵活）</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 通过父组件给子组件绑定一个自定义事件实现：子给父传递数据（第二种写法<span class="token operator">:</span>使用ref） <span class="token operator">--</span><span class="token operator">&gt;</span>
  <span class="token operator">&lt;</span>Student ref<span class="token operator">=</span><span class="token string">&quot;student&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
  
  ···
  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">getSchoolName</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;App收到了学校名：&quot;</span><span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token comment">// 使用es6的方式，传数组，不确定参数个数</span>
    <span class="token function">getStudentName</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span><span class="token operator">...</span>params</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      <span class="token comment">// a是个数组</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;App收到了学生名：&quot;</span><span class="token punctuation">,</span>name<span class="token punctuation">,</span>params<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token function">m1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&quot;demo事件被触发了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// ref更加灵活</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=&gt;</span><span class="token punctuation">{</span>
      <span class="token comment">// 绑定自定义事件</span>
      <span class="token comment">// this.$refs.student.$on(&quot;atguigu&quot;,this.getStudentName) </span>
      <span class="token comment">// 只能触发一次</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>$refs<span class="token punctuation">.</span>student<span class="token punctuation">.</span><span class="token function">$once</span><span class="token punctuation">(</span><span class="token string">&quot;atguigu&quot;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>getStudentName<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  ···    
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_3-子组件触发事件" tabindex="-1"><a class="header-anchor" href="#_3-子组件触发事件" aria-hidden="true">#</a> 3. 子组件触发事件</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>···
  <span class="token comment">// 触发Student组件实例身上的atguigu事件</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;atguigu&#39;</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">222</span><span class="token punctuation">,</span><span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">)</span>
···
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_81、组件自定义事件——解绑" tabindex="-1"><a class="header-anchor" href="#_81、组件自定义事件——解绑" aria-hidden="true">#</a> 81、组件自定义事件——解绑</h2><p>有两种解绑方式，一种是vue实例或组件生命周期结束的时候，组件身上的绑定事件以及子组件都会失活；另一种是手动解绑组件自定义事件。</p><h3 id="_1-生命周期结束" tabindex="-1"><a class="header-anchor" href="#_1-生命周期结束" aria-hidden="true">#</a> 1. 生命周期结束</h3><blockquote><p>生命周期结束后无法再使用绑定事件，即使是<code>@click</code>js原生事件也会跟着解绑。</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>···
  <span class="token function">mounted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$destroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-手动解绑组件自定义事件" tabindex="-1"><a class="header-anchor" href="#_2-手动解绑组件自定义事件" aria-hidden="true">#</a> 2. 手动解绑组件自定义事件</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>  ···
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token string">&#39;atguigu&#39;</span><span class="token punctuation">)</span> <span class="token comment">// 解绑一个自定义事件</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;atguigu&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;demo&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">//解绑多个自定义事件</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$off</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 暴力解绑 解绑所有的自定义事件</span>
  ···
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,15),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(p,[["render",c],["__file","01组件事件绑定与解绑.html.vue"]]);export{r as default};
