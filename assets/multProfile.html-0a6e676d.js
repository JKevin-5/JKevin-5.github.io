import{_ as n,p as r,q as e,a1 as t}from"./framework-e2feaeec.js";const s={},a=t(`<h2 id="多环境配置" tabindex="-1"><a class="header-anchor" href="#多环境配置" aria-hidden="true">#</a> 多环境配置</h2><p>SpringBoot项目目前有两种配置方式：</p><ol><li>SpringBoot项目创建时默认提供的properties文件；</li><li>YAML文件，一般是以<code>.yml</code>结尾的文件。</li></ol><p><strong>位置：</strong><code>/src/main/resources/</code>路径下。</p><h3 id="两种配置方式的优缺点" tabindex="-1"><a class="header-anchor" href="#两种配置方式的优缺点" aria-hidden="true">#</a> 两种配置方式的优缺点</h3><blockquote><p>对比由OpenAI给出，结合勘误</p></blockquote><table><thead><tr><th></th><th>YAML</th><th>Properties</th></tr></thead><tbody><tr><td><strong>优点</strong></td><td><strong>语法格式：</strong><br>使用缩进和冒号来表示层次结构。<br><br><strong>可读性强：</strong><br>YAML 使用缩进来表示层级关系，使得配置文件更加清晰易读。<br><br><strong>简洁性：</strong><br>相比于 Properties 文件，YAML 的写法更加简洁，可以减少配置文件的重复性。<br><br><strong>支持复杂数据结构：</strong><br>YAML 支持列表、映射等复杂数据结构，可以更方便地表示嵌套关系的配置。</td><td><strong>语法格式：</strong><br>使用点号和等号来表示键值对。<br><br><strong>简单易用：</strong><br>Properties 配置文件采用键值对的形式，语法简单易懂，容易上手。<br><br><strong>支持特殊字符：</strong><br>Properties 配置文件支持特殊字符的写法，不需要进行转义。</td></tr><tr><td><strong>缺点</strong></td><td><strong>语法要求严格：</strong><br>YAML 的语法相对复杂，对缩进、冒号等符号的使用有严格的要求，容易出错。<br><br><strong>不支持特殊字符：</strong><br>YAML 不支持一些特殊字符的写法，比如冒号、引号等，需要进行转义才能正确表示。</td><td><strong>不支持复杂数据结构：</strong><br>Properties 配置文件只支持简单的键值对形式，不支持复杂数据结构的表示，不方便表示嵌套关系的配置。<br><br><strong>配置文件冗余：</strong><br>Properties 配置文件的写法比较冗余，需要重复写入键名。</td></tr></tbody></table><h3 id="以yaml文件配置方式" tabindex="-1"><a class="header-anchor" href="#以yaml文件配置方式" aria-hidden="true">#</a> 以YAML文件配置方式</h3><ol><li>多文件配置<br> application-{profile}.yml，其中 {profile} 表示当前环境的名称</li><li>单文件配置<br> 使用三个短横杠来分割profile；<div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token comment"># 在2.4版本之前</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
    <span class="token key atrule">profile</span><span class="token punctuation">:</span> dev
<span class="token punctuation">---</span>
<span class="token comment"># 在2.4版本之后</span>
<span class="token key atrule">spring</span><span class="token punctuation">:</span>
    <span class="token key atrule">config</span><span class="token punctuation">:</span>
        <span class="token key atrule">activate</span><span class="token punctuation">:</span>
            <span class="token key atrule">on-profile</span><span class="token punctuation">:</span> dev
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li>springboot配置文件的优先级排序 <ol><li>@TestPropertySource 注解</li><li>命令行参数</li><li>Java系统属性（System.getProperties()）</li><li>操作系统环境变量</li><li>只有在random.*里包含的属性会产生一个RandomValuePropertySource</li><li>在打包的jar外的应用程序配置文件（application.properties，包含YAML和profile变量）</li><li>在打包的jar内的应用程序配置文件（application.properties，包含YAML和profile变量）</li><li>在@Configuration类上的@PropertySource注解</li><li>默认属性（使用SpringApplication.setDefaultProperties指定）</li><li>命令行参数、系统变量、环境变量等一些属性可以通过命令行参数来设置</li></ol></li></ol>`,9),o=[a];function i(l,p){return r(),e("div",null,o)}const d=n(s,[["render",i],["__file","multProfile.html.vue"]]);export{d as default};
