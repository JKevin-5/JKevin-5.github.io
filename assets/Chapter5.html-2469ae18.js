import{_ as a,p as s,q as n,a1 as e}from"./framework-e11e2eba.js";const t={},p=e(`<h1 id="chapter5-基本引用类型" tabindex="-1"><a class="header-anchor" href="#chapter5-基本引用类型" aria-hidden="true">#</a> Chapter5 基本引用类型</h1><blockquote><p>本章内容：</p><ul><li>理解对象</li><li>基本JavaScript数据类型</li><li>原始值与原始值包装类型</li></ul></blockquote><p>引用值（或者对象）是某个特定引用类型的实例。和类并不是一个概念。</p><p>对象被认为是某个特定引用类型的实例。新对象通过使用new操作符后跟一个构造函数来创建。构造函数就是用来创建新对象的函数。</p><p><b>函数也是一种引用类型，第10章专门用来介绍函数。</b></p><h2 id="_5-1-date" tabindex="-1"><a class="header-anchor" href="#_5-1-date" aria-hidden="true">#</a> 5.1 Date</h2><p>创建日期对象</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>日期对象格式化（String字符串转Date对象）</p><ul><li>月/日/年</li><li>月名 日，年</li><li>周几 月名 日 年 时:分:秒 时区</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> someDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span>Date<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">&quot;May 23, 2019&quot;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 等同于</span>
<span class="token keyword">let</span> someDate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token string">&quot;May 23, 2019&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-1-1-继承的方法" tabindex="-1"><a class="header-anchor" href="#_5-1-1-继承的方法" aria-hidden="true">#</a> 5.1.1 继承的方法</h3><p>与其他类型一样，Date 类型重写了 toLocaleString()、toString()和 valueOf()方法。但与 其他类型不同，重写后这些方法的返回值不一样。</p><p>...</p><h3 id="_5-1-2-日期格式化方法" tabindex="-1"><a class="header-anchor" href="#_5-1-2-日期格式化方法" aria-hidden="true">#</a> 5.1.2 日期格式化方法</h3><p>...</p><h3 id="_5-1-3-日期-时间组件方法" tabindex="-1"><a class="header-anchor" href="#_5-1-3-日期-时间组件方法" aria-hidden="true">#</a> 5.1.3 日期/时间组件方法</h3><p>...</p><h2 id="_5-2-regexp" tabindex="-1"><a class="header-anchor" href="#_5-2-regexp" aria-hidden="true">#</a> 5.2 RegExp</h2><blockquote><p>ECMAScript 通过 RegExp 类型支持正则表达式。</p></blockquote><h2 id="_5-3-原始值包装类型" tabindex="-1"><a class="header-anchor" href="#_5-3-原始值包装类型" aria-hidden="true">#</a> 5.3 原始值包装类型</h2><p>ECMAScript提供了3种引用类型：Boolean、Number和String。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token string">&quot;some text&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// s1对象仅存活在该代码的执行生命周期</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>原始值本身不是对象，因此在逻辑上也不应有方法。</p><p>后台执行三个步骤：</p><ol><li>创建一个String类型的实例；</li><li>调用实例上的特定方法；</li><li>销毁实例；</li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 可想象为以下执行过程</span>
<span class="token keyword">let</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">&quot;some text&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> s2 <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
s1 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_5-3-1" tabindex="-1"><a class="header-anchor" href="#_5-3-1" aria-hidden="true">#</a> 5.3.1</h3>`,28),o=[p];function c(i,l){return s(),n("div",null,o)}const d=a(t,[["render",c],["__file","Chapter5.html.vue"]]);export{d as default};
