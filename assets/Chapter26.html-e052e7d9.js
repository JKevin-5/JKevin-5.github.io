import{_ as n,p as s,q as a,a1 as p}from"./framework-e11e2eba.js";const t={},e=p(`<h1 id="chapter26-模块" tabindex="-1"><a class="header-anchor" href="#chapter26-模块" aria-hidden="true">#</a> Chapter26 模块</h1><blockquote><p>本章内容：</p><ul><li>理解模块模式</li><li>凑合的模块系统</li><li>使用ES6前模块加载器</li><li>使用ES6模块</li></ul></blockquote><p>在ES6模块规范出现之前，浏览器原生不支持模块行为，但是迫切需要这样的行为导致，希望使用模块模式的库或代码库必须基于JS语法等伪造出类似模块的行为。</p><h2 id="_26-1-理解模块模式" tabindex="-1"><a class="header-anchor" href="#_26-1-理解模块模式" aria-hidden="true">#</a> 26.1 理解模块模式</h2><blockquote><p>把逻辑分块，各自封装，互相独立，每个块自行决定对外暴露什么，同时自行决定引入执行哪些外部代码。</p></blockquote><h3 id="_26-1-1-模块标识符" tabindex="-1"><a class="header-anchor" href="#_26-1-1-模块标识符" aria-hidden="true">#</a> 26.1.1 模块标识符</h3><blockquote><p>模块系统本质上是键值实体，其中每个模块都有个可用于引用它的标识符。可能是模拟模块系统中的字符串，也可能是原生实现系统中的实际路径。</p></blockquote><p>原生浏览器模块标识符必须提供实际的JavaScript文件的路径。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>js文件的地址<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Node.js会搜索node_modules目录，用标识符去匹配包含index.js的目录。</p><h3 id="_26-1-2-模块依赖" tabindex="-1"><a class="header-anchor" href="#_26-1-2-模块依赖" aria-hidden="true">#</a> 26.1.2 模块依赖</h3><p>略</p><h3 id="_26-1-3-模块加载" tabindex="-1"><a class="header-anchor" href="#_26-1-3-模块加载" aria-hidden="true">#</a> 26.1.3 模块加载</h3><p>浏览器中，加载依赖涉及几个步骤：</p><ol><li>浏览器还没收到依赖模块的代码，必须发送请求并等待网络返回；</li><li>收到后浏览器需要确定刚收到的模块是否也有依赖；</li><li>递归的评估加载所有依赖，直到所有依赖模块都加载完成，才执行入口模块。</li></ol><h3 id="_26-1-4-入口" tabindex="-1"><a class="header-anchor" href="#_26-1-4-入口" aria-hidden="true">#</a> 26.1.4 入口</h3><blockquote><p>因为JavaScript是顺序执行，并且是单线程的，所以代码必须有执行的起点。</p></blockquote><p>模块加载是&quot;阻塞的&quot;，每个模块加载并初始化必须按照一定的顺序来，需要手动改管理正确的加载顺序。</p><h3 id="_26-1-5-异步依赖" tabindex="-1"><a class="header-anchor" href="#_26-1-5-异步依赖" aria-hidden="true">#</a> 26.1.5 异步依赖</h3><p>JavaScript可以通知模块系统在必要时加载新模块，并在模块加载完成后提供回调。</p><p>按道理来说，只需要用一个script标签即可完成模块A的加载。模块A按需请求模块文件。</p><p>&lt;script&gt;标签可以应用defer<a href="%E5%BB%B6%E8%BF%9F%E5%8A%A0%E8%BD%BD%EF%BC%8C%E4%B8%8D%E9%98%BB%E5%A1%9E%EF%BC%8C%E5%9C%A8html%E4%B8%AD%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%89%A7%E8%A1%8C%E3%80%82">^注释1</a>或async<a href="async%E5%B1%9E%E6%80%A7%E7%9A%84script%E6%A0%87%E7%AD%BE%E4%B8%8D%E4%BC%9A%E9%98%BB%E5%A1%9E%E6%B5%8F%E8%A7%88%E5%99%A8%E8%A7%A3%E6%9E%90html%E3%80%82async%E5%B1%9E%E6%80%A7%E6%98%AF%E4%B8%8D%E5%8F%AF%E6%8E%A7%E7%9A%84%EF%BC%8C%E6%89%A7%E8%A1%8C%E7%9A%84%E6%97%B6%E9%97%B4%E9%A1%BA%E5%BA%8F%E9%83%BD%E4%B8%8D%E7%A1%AE%E5%AE%9A%E3%80%82%E6%8C%89%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E%E9%A1%BA%E5%BA%8F%EF%BC%8C%E5%8F%AF%E8%83%BD%E9%98%BB%E5%A1%9E%E4%B9%9F%E5%8F%AF%E8%83%BD%E4%B8%8D%E9%98%BB%E5%A1%9E">^注释2</a>属性，加上按需加载逻辑，可以模拟ES6规范中实现的行为。</p><h3 id="_26-1-6-动态依赖" tabindex="-1"><a class="header-anchor" href="#_26-1-6-动态依赖" aria-hidden="true">#</a> 26.1.6 动态依赖</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">if</span><span class="token punctuation">(</span>loadCondition<span class="token punctuation">)</span><span class="token punctuation">{</span>
  <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./moduleA&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_26-1-7-静态分析" tabindex="-1"><a class="header-anchor" href="#_26-1-7-静态分析" aria-hidden="true">#</a> 26.1.7 静态分析</h3><h3 id="_26-1-8-循环依赖" tabindex="-1"><a class="header-anchor" href="#_26-1-8-循环依赖" aria-hidden="true">#</a> 26.1.8 循环依赖</h3><p>基本每个js程序都存在依赖循环，CommonJS、AMD和ES6在内的所有模块系统都支持循环依赖。</p><h2 id="_26-2-凑合的模块系统" tabindex="-1"><a class="header-anchor" href="#_26-2-凑合的模块系统" aria-hidden="true">#</a> 26.2 凑合的模块系统</h2><p>为了按模块模式提供必要的封装，ES6之前的模块会使用函数作用域和立即调用函数表达式将模块定义封装到匿名闭包中。</p><h3 id="_26-2-1模块定义" tabindex="-1"><a class="header-anchor" href="#_26-2-1模块定义" aria-hidden="true">#</a> 26.2.1模块定义</h3><p>模块定义是立即执行的。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 私有Foo模块的代码</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_26-2-2-命名空间" tabindex="-1"><a class="header-anchor" href="#_26-2-2-命名空间" aria-hidden="true">#</a> 26.2.2 命名空间</h3><p>把这个模块的返回值赋给一个变量，那么就为了模块创建了命名空间：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> Foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token comment">// 私有Foo模块的代码</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_26-2-3-暴露公共api" tabindex="-1"><a class="header-anchor" href="#_26-2-3-暴露公共api" aria-hidden="true">#</a> 26.2.3 暴露公共API</h3><p>为了暴露公共API，模块IIFE会返回一个对象，其属性就是模块命名空间中的公共成员：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> Foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">{</span>
       <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">,</span>
       <span class="token function-variable function">baz</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;baz&#39;</span>
Foo<span class="token punctuation">.</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;baz&#39; </span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_26-2-4-泄露模块模式" tabindex="-1"><a class="header-anchor" href="#_26-2-4-泄露模块模式" aria-hidden="true">#</a> 26.2.4 泄露模块模式</h3><p>另一种模式：泄露模块模式，只返回一个对象，其属性是私有数据和成员的引用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> Foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">;</span>
   <span class="token keyword">var</span> <span class="token function-variable function">baz</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
       console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span><span class="token punctuation">;</span>
   <span class="token keyword">return</span> <span class="token punctuation">{</span>
       <span class="token literal-property property">bar</span><span class="token operator">:</span> bar<span class="token punctuation">,</span>
       <span class="token literal-property property">baz</span><span class="token operator">:</span> baz
   <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;baz&#39;</span>
Foo<span class="token punctuation">.</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;baz&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_26-2-5-命名空间的嵌套" tabindex="-1"><a class="header-anchor" href="#_26-2-5-命名空间的嵌套" aria-hidden="true">#</a> 26.2.5 命名空间的嵌套</h3><p>命名空间的嵌套：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> Foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">{</span>
       <span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token string">&#39;baz&#39;</span>
   <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Foo<span class="token punctuation">.</span>baz <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">{</span>
       <span class="token function-variable function">qux</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;baz&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;baz&#39;</span>
Foo<span class="token punctuation">.</span>baz<span class="token punctuation">.</span><span class="token function">qux</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;baz&#39; </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_26-2-6-外部传参" tabindex="-1"><a class="header-anchor" href="#_26-2-6-外部传参" aria-hidden="true">#</a> 26.2.6 外部传参</h3><p>可以传入外部值给IIFE</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> globalBar <span class="token operator">=</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> Foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">bar</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">return</span> <span class="token punctuation">{</span>
       <span class="token literal-property property">bar</span><span class="token operator">:</span> bar<span class="token punctuation">,</span>
       <span class="token function-variable function">baz</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
           console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
       <span class="token punctuation">}</span>
   <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>globalBar<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;baz&#39;</span>
Foo<span class="token punctuation">.</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;baz&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_26-2-7-拓展模块" tabindex="-1"><a class="header-anchor" href="#_26-2-7-拓展模块" aria-hidden="true">#</a> 26.2.7 拓展模块</h3><p>拓展模块：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 原始的 Foo</span>
<span class="token keyword">var</span> Foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">bar</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">var</span> bar <span class="token operator">=</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> <span class="token punctuation">{</span>
   <span class="token literal-property property">bar</span><span class="token operator">:</span> bar
 <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 扩展 Foo</span>
<span class="token keyword">var</span> Foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">FooModule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 FooModule<span class="token punctuation">.</span><span class="token function-variable function">baz</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>FooModule<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">return</span> FooModule<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;baz&#39;</span>
Foo<span class="token punctuation">.</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;baz&#39;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>判断模块是否存在再进行扩展：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 扩展 Foo 以增加新方法</span>
<span class="token keyword">var</span> Foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">FooModule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 FooModule<span class="token punctuation">.</span><span class="token function-variable function">baz</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>FooModule<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
 <span class="token keyword">return</span> FooModule<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Foo <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 扩展 Foo 以增加新数据</span>
<span class="token keyword">var</span> Foo <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">FooModule</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 FooModule<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">;</span>
 <span class="token keyword">return</span> FooModule<span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">(</span>Foo <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;baz&#39;</span>
Foo<span class="token punctuation">.</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;baz&#39; </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_26-3-使用es6之前的模块加载器" tabindex="-1"><a class="header-anchor" href="#_26-3-使用es6之前的模块加载器" aria-hidden="true">#</a> 26.3 使用ES6之前的模块加载器</h2><blockquote><p>需要单独的模块工具把这些模块语法与JavaScript运行时连接起来。</p></blockquote><h3 id="_26-3-1-commonjs" tabindex="-1"><a class="header-anchor" href="#_26-3-1-commonjs" aria-hidden="true">#</a> 26.3.1 CommonJS</h3><blockquote><p>Node.js中使用的是轻微修改版本的CommonJS</p></blockquote><p>CommonJS模块定义需要用require()指定依赖，使用exports对象定义自己的公共API。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> moduleB <span class="token operator">=</span> <span class="token function">reuqire</span><span class="token punctuation">(</span><span class="token string">&#39;./moduleB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>expores <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">stuff</span><span class="token operator">:</span> moduleB<span class="token punctuation">.</span><span class="token function">doStuff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NodeJs中，模块标识符可能指向文件，也可能指向包含index.js文件的目录。</p><p>require请求模块会加载相应模块，可以赋值给变量，也可以原封不动的加载进来。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;moduleA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./moduleA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &quot;moduleA&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>无论moduleA被引用几次，模块永远是单例的，只会被引入一次。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;moduleA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a1 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./moduleA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a2 <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./moduleA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a1 <span class="token operator">===</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在CommonJS中，模块加载是模块系统执行的同步操作，因此也可以这样做：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;moduleA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>loadCondition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./moduleA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>NodeJs中可以使用绝对或相对路径，也可以使用安装在node_modules目录中依赖的模块标识符。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">require</span><span class="token punctuation">(</span>@vue<span class="token operator">/</span>cli<span class="token punctuation">)</span><span class="token comment">// 类似</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h4 id="具体实现" tabindex="-1"><a class="header-anchor" href="#具体实现" aria-hidden="true">#</a> 具体实现</h4><p>有模块想要使用接口的话</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> moduleA <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./moduleA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>moduleA<span class="token punctuation">.</span>stuff<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>注意，此模块不导出任何内容。</p><p>导出一个实体：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 在其他的模块</span>
<span class="token keyword">var</span> moduleA <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./moduleB&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>moduleB<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#39;foo&#39; </span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导出多个值：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">{</span>
 <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">,</span>
 <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">&#39;B&#39;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token string">&#39;A&#39;</span><span class="token punctuation">;</span>
module<span class="token punctuation">.</span>exports<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token string">&#39;B&#39;</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>托管类定义：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token constant">A</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> <span class="token constant">A</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./moduleA&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_26-3-2-amd异步模块定义" tabindex="-1"><a class="header-anchor" href="#_26-3-2-amd异步模块定义" aria-hidden="true">#</a> 26.3.2 AMD异步模块定义</h3><p>CommonJS是以服务器为目标环境，能够一次性把所有模块都加载到内存。而AMD模块定义系统是以浏览器为目标执行环境，需要考虑网络延迟的问题。</p><h3 id="_26-3-3-umd通用模板定义" tabindex="-1"><a class="header-anchor" href="#_26-3-3-umd通用模板定义" aria-hidden="true">#</a> 26.3.3 UMD通用模板定义</h3><p> UMD是为了统一CommonJS和AMD生态。启动的时候会检测要使用哪个模块系统，然后进行配置，并把逻辑包装到一个立即调用的函数表达式中IIFE。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">root<span class="token punctuation">,</span> factory</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> define <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span> <span class="token operator">&amp;&amp;</span> define<span class="token punctuation">.</span>amd<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// AMD。注册为匿名模块</span>
 <span class="token function">define</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;moduleB&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span> factory<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> module <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> module<span class="token punctuation">.</span>exports<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// Node。不支持严格 CommonJS</span>
 <span class="token comment">// 但可以在 Node 这样支持 module.exports 的</span>
 <span class="token comment">// 类 CommonJS 环境下使用</span>
 module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39; moduleB &#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
 <span class="token comment">// 浏览器全局上下文（root 是 window）</span>
 root<span class="token punctuation">.</span>returnExports <span class="token operator">=</span> <span class="token function">factory</span><span class="token punctuation">(</span>root<span class="token punctuation">.</span> moduleB<span class="token punctuation">)</span><span class="token punctuation">;</span>
 <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">moduleB</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token comment">// 以某种方式使用 moduleB</span>
 <span class="token comment">// 将返回值作为模块的导出</span>
 <span class="token comment">// 这个例子返回了一个对象</span>
 <span class="token comment">// 但是模块也可以返回函数作为导出值</span>
 <span class="token keyword">return</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_26-3-4-模块加载器终将没落" tabindex="-1"><a class="header-anchor" href="#_26-3-4-模块加载器终将没落" aria-hidden="true">#</a> 26.3.4 模块加载器终将没落</h3><p>ES6模块规范⇒CommonJS和AMD</p><h2 id="_26-4-使用es6模块" tabindex="-1"><a class="header-anchor" href="#_26-4-使用es6模块" aria-hidden="true">#</a> 26.4 使用ES6模块</h2><blockquote><p>从很多方面看，ES6 模块系统是集 AMD 和 CommonJS 之大成者。</p></blockquote><h3 id="_26-4-1-模块标签及定义" tabindex="-1"><a class="header-anchor" href="#_26-4-1-模块标签及定义" aria-hidden="true">#</a> 26.4.1 模块标签及定义</h3><p>引入方式：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;module&quot;</span><span class="token operator">&gt;</span>
 <span class="token comment">// 模块代码</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;module&quot;</span> src<span class="token operator">=</span><span class="token string">&quot;path/to/myModule.js&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>顺序只会影响文件加载顺序，不会影响模块加载顺序。</p><h3 id="_26-4-2-模块加载" tabindex="-1"><a class="header-anchor" href="#_26-4-2-模块加载" aria-hidden="true">#</a> 26.4.2 模块加载</h3><h3 id="_26-4-3-模块行为" tabindex="-1"><a class="header-anchor" href="#_26-4-3-模块行为" aria-hidden="true">#</a> 26.4.3 模块行为</h3><h3 id="_26-4-4-模块导出" tabindex="-1"><a class="header-anchor" href="#_26-4-4-模块导出" aria-hidden="true">#</a> 26.4.4 模块导出</h3><p>两种导出方式：命名导出和默认导出</p><h4 id="命名导出" tabindex="-1"><a class="header-anchor" href="#命名导出" aria-hidden="true">#</a> 命名导出</h4><p>export 关键字用于声明一个值为命名导出。导出语句必须在模块顶级，不能嵌套在某个块中：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 允许</span>
<span class="token keyword">export</span> <span class="token operator">...</span>

<span class="token comment">// 不允许</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">export</span> <span class="token operator">...</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>export的顺序不限制</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 允许</span>
<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span><span class="token punctuation">;</span>

<span class="token comment">// 允许</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>

<span class="token comment">// 允许，但应该避免</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>导出时候可以提供别名</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> foo <span class="token keyword">as</span> myFoo <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>一个模块中声明多个命名导出。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">export</span> <span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> foo<span class="token punctuation">,</span> bar <span class="token keyword">as</span> myBar<span class="token punctuation">,</span> baz <span class="token punctuation">}</span><span class="token punctuation">;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="默认导出" tabindex="-1"><a class="header-anchor" href="#默认导出" aria-hidden="true">#</a> 默认导出</h4><p>每个模块只能有一个默认导出。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> foo<span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>提供default关键字</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
<span class="token comment">// 等同于 export default foo;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> foo <span class="token keyword">as</span> <span class="token keyword">default</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>命名导出和默认导出不冲突</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> bar <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> foo<span class="token punctuation">;</span>

<span class="token comment">//这两个 export 语句可以组合为一行：</span>
<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">export</span> <span class="token punctuation">{</span> foo <span class="token keyword">as</span> <span class="token keyword">default</span><span class="token punctuation">,</span> bar <span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_26-4-5-模块导入" tabindex="-1"><a class="header-anchor" href="#_26-4-5-模块导入" aria-hidden="true">#</a> 26.4.5 模块导入</h3><p>与 export 类似，import 必须出现在模块的顶级：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 允许</span>
<span class="token keyword">import</span> <span class="token operator">...</span>

<span class="token comment">// 不允许</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>
 <span class="token keyword">import</span> <span class="token operator">...</span>
<span class="token punctuation">}</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>import会被提升到模块顶部。</p>`,114),o=[e];function c(i,l){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","Chapter26.html.vue"]]);export{r as default};
