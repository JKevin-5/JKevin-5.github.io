import{_ as n,p as s,q as a,a1 as p}from"./framework-e11e2eba.js";const t={},e=p(`<h1 id="chapter6-集合引用类型" tabindex="-1"><a class="header-anchor" href="#chapter6-集合引用类型" aria-hidden="true">#</a> Chapter6 集合引用类型</h1><blockquote><p>本章内容：</p><ul><li>对象</li><li>数组与定型数组</li><li>Map、WeakMap、Set以及WeakSet类型</li></ul></blockquote><h2 id="_6-1-object" tabindex="-1"><a class="header-anchor" href="#_6-1-object" aria-hidden="true">#</a> 6.1 Object</h2><p>大多数引用值的示例使用的是Object类型，虽然Object实例没有多少功能，但很适合存储和在应用程序间交换数据。</p><h3 id="创建object实例" tabindex="-1"><a class="header-anchor" href="#创建object实例" aria-hidden="true">#</a> 创建Object实例</h3><ol><li><p>使用new操作符和Object构造函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 另一</span>
<span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&quot;Tom&quot;</span><span class="token punctuation">;</span>
person<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">29</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用对象字面量表示法。对象字面量是对象定义的简写形式，目的是为了简化包含大量的对象的创建。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span> <span class="token operator">:</span> <span class="token string">&#39;Tom&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">age</span> <span class="token operator">:</span> <span class="token number">29</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ol><p>有一些关注点：</p><ul><li>最后一个属性后面加上逗号在非常老的浏览器中会导致报错；</li><li>在对象字面量表示法中，属性名可以是字符串或数值；</li></ul><p>实际上开发者更倾向于使用对象字面量表示法：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">displayInfo</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   <span class="token keyword">let</span> output <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">;</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> args<span class="token punctuation">.</span>name <span class="token operator">==</span> <span class="token string">&quot;string&quot;</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
   output <span class="token operator">+=</span> <span class="token string">&quot;Name: &quot;</span> <span class="token operator">+</span> args<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> args<span class="token punctuation">.</span>age <span class="token operator">==</span> <span class="token string">&quot;number&quot;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
   output <span class="token operator">+=</span> <span class="token string">&quot;Age: &quot;</span> <span class="token operator">+</span> args<span class="token punctuation">.</span>age <span class="token operator">+</span> <span class="token string">&quot;\\n&quot;</span><span class="token punctuation">;</span>
   <span class="token punctuation">}</span>
   <span class="token function">alert</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token function">displayInfo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
   <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Nicholas&quot;</span><span class="token punctuation">,</span>
   <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">29</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">displayInfo</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
   <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Greg&quot;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>重点！！！：如何去判断一个对象中是否存在该属性?</strong></p><blockquote><p>注意：这种模式非常适合函数有大量可选参数的情况。最好的方式是：对必选参数使用命名参数，再通过一个对象字面量来封装多个可选参数。</p></blockquote><h3 id="访问对象中的属性" tabindex="-1"><a class="header-anchor" href="#访问对象中的属性" aria-hidden="true">#</a> 访问对象中的属性</h3><ol><li>person[&quot;name&quot;]</li><li>person.name</li></ol><p>可通过变量进行访问属性：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> propertyName <span class="token operator">=</span> <span class="token string">&quot;name&quot;</span><span class="token punctuation">;</span>
<span class="token comment">// propertyName中允许属性名中可以包含非字母数字字符，通过中括号语法存取</span>
person<span class="token punctuation">[</span>propertyName<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>第八章更全面、深入的介绍Object类型。</p></blockquote><h2 id="_6-2-array" tabindex="-1"><a class="header-anchor" href="#_6-2-array" aria-hidden="true">#</a> 6.2 Array</h2><blockquote><p>Array是除了Object外最常用的类型。Array数组也是一组有序数据，不同点在于==数组中每个槽位可以存储任意类型的数据，且是动态大小，会随着数据添加而自动增长。==</p></blockquote><h3 id="_6-2-1-创建数组" tabindex="-1"><a class="header-anchor" href="#_6-2-1-创建数组" aria-hidden="true">#</a> 6.2.1 创建数组</h3><p><strong>创建方法</strong></p><ol><li><p>使用Array构造函数</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 已知数组中元素的数量</span>
<span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 也可以传入要保存的元素</span>
<span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;green&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;blue&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 可忽略new操作符</span>
<span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>使用数组字面量表示法</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&quot;red&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;blue&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;green&quot;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> name <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>ES6新增静态方法：</p><ul><li><p>from()：用于将类数组结构转换为数组实例</p><p>第一个参数是一个类数组对象，即任何可迭代的结构。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 字符串拆分为单字符数组</span>
Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span><span class="token string">&quot;Matt&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [&quot;M&quot;,&quot;a&quot;,&quot;t&quot;,&quot;t&quot;]</span>
<span class="token comment">// 将集合和映射转换为一个新数组</span>
<span class="token keyword">const</span> m <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Map</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [[1,2],[3,4]]</span>
Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// [1,2,3,4]</span>
<span class="token comment">// 对现有的数组执行浅复制</span>
<span class="token keyword">const</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> a2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 可以使用任何可迭代对象*</span>
<span class="token comment">// arguments对象可以被轻松地转换为数组*</span>
<span class="token comment">// from()也能转换带有必要属性的自定义对象*</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>第二个可选的映射函数参数。这个函数可以直接增强新数组的值，无需调用一个Array.from().map()先创建一个中间数组。</p><p>第三个可选参数，用于指定映射函数中this的值，这个重写this在箭头函数中不适用。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> a1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> a2 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token parameter">x</span> <span class="token operator">=&gt;</span> x<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> a3 <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> x<span class="token operator">**</span><span class="token keyword">this</span><span class="token punctuation">.</span>exponent<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">exponent</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 4, 9, 16]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 4, 9, 16] </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li><li><p>of()：用于将一组参数转换为数组实例</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [1, 2, 3, 4]</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// [undefined] </span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li></li></ol><h2 id="_6-3-定型数组" tabindex="-1"><a class="header-anchor" href="#_6-3-定型数组" aria-hidden="true">#</a> 6.3 定型数组</h2><h2 id="_6-4-map" tabindex="-1"><a class="header-anchor" href="#_6-4-map" aria-hidden="true">#</a> 6.4 Map</h2><h2 id="_6-5-weakmap" tabindex="-1"><a class="header-anchor" href="#_6-5-weakmap" aria-hidden="true">#</a> 6.5 WeakMap</h2><h2 id="_6-6-set" tabindex="-1"><a class="header-anchor" href="#_6-6-set" aria-hidden="true">#</a> 6.6 Set</h2><h2 id="_6-7-迭代与扩展操作" tabindex="-1"><a class="header-anchor" href="#_6-7-迭代与扩展操作" aria-hidden="true">#</a> 6.7 迭代与扩展操作</h2><h2 id="_6-8-小结" tabindex="-1"><a class="header-anchor" href="#_6-8-小结" aria-hidden="true">#</a> 6.8 小结</h2>`,28),o=[e];function c(l,u){return s(),a("div",null,o)}const r=n(t,[["render",c],["__file","Chapter6.html.vue"]]);export{r as default};
